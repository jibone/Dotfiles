set tabstop=2
set softtabstop=2
set shiftwidth=2
set expandtab

" textmate like set invisibles.
" ctrl-v u25b8 for ▸ and ctrl-v u00ac for ¬
set listchars=tab:▸\ ,eol:¬
set list

" folding settings
set foldmethod=indent
set foldnestmax=10
set nofoldenable
set foldlevel=1
set foldcolumn=0

set nohls
set incsearch
set showcmd
set nowrap
set autoindent
set smartindent

set number
set relativenumber

syntax on
filetype on
filetype indent on
filetype plugin on

autocmd ColorScheme * highlight ExtraWhitespace ctermbg=red guibg=red

set background=dark
colorscheme Tomorrow-Night

match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()

set runtimepath^=~/.vim/bundle/ctrlp.vim

au BufNewFile,BufRead *.ejs set filetype=html

autocmd Filetype gitcommit setlocal spell textwidth=72
autocmd Filetype markdown setlocal spell textwidth=72
autocmd Filetype md setlocal spell textwidth=72
autocmd Filetype text setlocal spell textwidth=72
autocmd Filetype txt setlocal spell textwidth=72

" pathogen stuff
call pathogen#infect()

" highlight the status bar when in insert mode
if version >= 700
  au InsertEnter * hi StatusLine ctermfg=235 ctermbg=2
  au InsertLeave * hi StatusLine ctermbg=240 ctermfg=12
endif

if exists('+colorcolumn')
  set colorcolumn=120
else
  au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>80v.\+', -1)
endif

" remove tool bar from GUI
if has("gui_running")
    set guioptions=-t
    set clipboard=unnamed
    " set transparency=10
    colorscheme Tomorrow-Night
    " set guifont=M+\ 1m\ light:h11
    set guifont=Monaco:h11
endif

function! LineNumToggle()
  if(&relativenumber == 1)
    set norelativenumber
  else
    set relativenumber
  endif
endfunc

nnoremap <C-m> :call LineNumToggle()<cr>

" switching buffers
function! MarkWindowSwap()
    let g:markedWinNum = winnr()
endfunction

function! DoWindowSwap()
    " mark destination
    let curNum = winnr()
    let curBuf = bufnr("%")
    exe g:markedWinNum . "wincmd w"
    "Switch to source and shuffle dest->source
    let markedBuf = bufnr( "%" )
    "Hide and open so that we aren't prompted and keep history
    exe 'hide buf' curBuf
    "Switch to dest and shuffle source->dest
    exe curNum . "wincmd w"
    "Hide and open so that we aren't prompted and keep history
    exe 'hide buf' markedBuf
endfunction

nmap <silent> <leader>mw :call MarkWindowSwap()<CR>
nmap <silent> <leader>pw :call DoWindowSwap()<CR>

" provide hjkl movements in Insert mode via the <Alt> modifier key
inoremap <A-h> <C-o>h
inoremap <A-j> <C-o>j
inoremap <A-k> <C-o>k
inoremap <A-l> <C-o>l
